# -*- coding: utf-8 -*-
"""Ultrasonicplusbot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fwl-Qm-Qp-NaGfoZgpQEHNPHvIKxL8oa
"""

pip install khayyam

pip install pyTelegrambotapi

pip install gTTS

pip install qrcode

pip install telebot

import telebot
import string
import random
import os
from gtts import gTTS
import qrcode
import khayyam
from datetime import datetime

bot = telebot.TeleBot("6803522028:AAFnoHc5yb8Q4afG75p__4h9l9pHrnPyFFg")

# Start Command
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, f"Hello {message.from_user.first_name} , Welcome to my Bot!")


# Help Command
@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.chat.id, "Here is a list of all the commands and their functionality\n"
                                      "/start - welcomes the user\n"
                                      "/game - play a guess game\n"
                                      "/age - calculates the age\n"
                                      "/voice - English text to speech converter\n"
                                      "/max - finds the maximum number amongst an array of numbers\n"
                                      "/argmax - finds the argument of the maximum number amongst an array of numbers\n"
                                      "/qrcode - converts string into a QR-Code\n"
                                      "/help - show the aforementioned commands\n")



#Age Command
current = datetime.utcnow()
@bot.message_handler(commands=["age"])
def age(message):
    msg = bot.send_message(message.chat.id, "Enter your birth date in Jalali format like YYYY/MM/DD")
    bot.register_next_step_handler(msg, find_age)

def find_age(message):
    text = message.text
    new_text = text.translate({ord(c): None for c in string.whitespace})
    values = new_text.split("/")
    convertible_to_float = [float(s) for s in values if isinstance(s, str) and s.isdigit()]
    if convertible_to_float == []:
        bot.send_message(message.chat.id, "Enter Correct Style of Date to get your age!\nGame is Closed!")
    else:
        if convertible_to_float[0] > 1403 or convertible_to_float[0] < 1:
            bot.send_message(message.chat.id, "Year Must be Between 1 and 1403 Idiot!\nGame Closed")
        elif convertible_to_float[1] >12 or convertible_to_float[1] < 1:
            bot.send_message(message.chat.id, "Month Must be Between 1 and 12 Idiot!\nGame Closed")
        elif convertible_to_float [2] > 31 or convertible_to_float[2] < 1:
            bot.send_message(message.chat.id, "Day Must be Between 1 and 31 Idiot!\Game Closed")
        else:
            roman_birth = khayyam.JalaliDate(convertible_to_float[0], convertible_to_float[1], convertible_to_float[2]).todate()
            day_answer = current.day - roman_birth.day
            month_answer = current.month - roman_birth.month
            year_answer = current.year - roman_birth.year
            if day_answer < 0:
                month_answer -= 1
                day_answer += 30
            if month_answer < 0:
                year_answer -= 1
                month_answer += 12
            bot.send_message(message.chat.id, f"You are {year_answer} years and {month_answer} month and {day_answer} day OLD!")


# Finds the maximum number among a set of string of numbers
@bot.message_handler(commands=["max"])
def maximum(message):
    msg = bot.send_message(message.chat.id, "Enter an array of String of numbers in the form of the: 1st number, 2nd number, 3rd number, ....")
    bot.register_next_step_handler(msg, find_max)


def find_max(message):
    numbers_set = message.text
    new_numbers_set = numbers_set.translate({ord(c): None for c in string.whitespace})
    values = new_numbers_set.split(",")
    convertible_to_float = [float(s) for s in values if isinstance(s, str) and s.isdigit()]
    if convertible_to_float == []:
        bot.send_message(message.chat.id, "Enter Correct Set of Numbers\nGame is Closed!")
    else:
        bot.send_message(message.chat.id, f"{max(convertible_to_float)} is The Greatest among the rest")


# Finds the Argument of the maximum number among a set of string of numbers
@bot.message_handler(commands=["argmax"])
def maximum(message):
    msg = bot.send_message(message.chat.id, "Enter an array of String of numbers in the form of the: 1st number, 2nd number, 3rd number, ....")
    bot.register_next_step_handler(msg, arg_max)


def arg_max(message):
    numbers_set = message.text
    new_numbers_set = numbers_set.translate({ord(c): None for c in string.whitespace})
    values = new_numbers_set.split(",")
    convertible_to_float = [float(s) for s in values if isinstance(s, str) and s.isdigit()]
    if convertible_to_float == []:
        bot.send_message(message.chat.id, "Enter Correct Set of Numbers\nGame is Closed!")
    else:
        bot.send_message(message.chat.id, f"{convertible_to_float.index(max(convertible_to_float))} is The Index of the Greatest Number among the rest")



# Text to Speech Converter
@bot.message_handler(commands=['voice'])
def TTS(message):
    msg = bot.send_message(message.chat.id, "Enter a valid statement in English Language")
    bot.register_next_step_handler(msg, convert_to_speech)

def convert_to_speech(message):
    # Get the text input from the user
    text = message.text.replace('/voice ', '')

    # Convert text to speech using gTTS
    tts = gTTS(text=text, lang='en')

    # Save the speech as an audio file
    audio_file = 'speech.mp3'
    tts.save(audio_file)

    # Send the audio file to the user
    with open(audio_file, 'rb') as f:
        bot.send_audio(message.chat.id, f)

    # Delete the audio file after sending it
    os.remove(audio_file)


def msg(message ,m):
    return bot.send_message(message.chat.id, m)


rand_n = {}
# Guess Game Command
@bot.message_handler(commands=['game'])
def game_command(message):

    username = message.from_user.username
    rand_n[username] = random.randint(0, 100)

    msg(message, "Guess number game!")
    m = bot.send_message(message.chat.id, "Enter your guess: ")
    bot.register_next_step_handler(m, game)

@bot.message_handler(commands=["restart"])
def restart_game(message):
    username = message.from_user.username
    rand_n[username] = random.randint(0, 100)

    msg(message, "Game is restarted....")
    msg(message, "Guess number game!")
    m = bot.send_message(message.chat.id, "Enter your guess: ")
    bot.register_next_step_handler(m, game)


def game(message):
    try:
        username = message.from_user.username
        guess = int(message.text)

        if guess == rand_n[username]:
            bot.send_message(message.chat.id, "Congratulations!\nGame is Closed")
        elif guess > rand_n[username]:
            m = bot.send_message(message.chat.id, "Go Down")
            bot.register_next_step_handler(m, game)

        elif guess < rand_n[username]:
            m = bot.send_message(message.chat.id, "Go Up")
            bot.register_next_step_handler(m, game)

        user_input = int(message.text)
    except:
        if message.text == '/restart':
            restart_game(message)
        else:
            bot.send_message(message.chat.id, "Enter the number correctly\nGame is closed")


@bot.message_handler(commands=['qrcode'])
def qrcode_command(message):
    m = bot.send_message(message.chat.id, "Enter a valid string to convert to qrcode")
    bot.register_next_step_handler(m, qrcode_maker)

def qrcode_maker(message):
    res = qrcode.make(message.text)
    res.save("QRcode.png")
    with open("QRcode.png", "rb") as photo:
        bot.send_photo(message.chat.id, photo)


# Run the Commands
bot.polling()